import{x as f,bq as c,ar as y}from"./index-CkmlDq5s.js";import{i18nInstance as l}from"./i18n-DDsdsaPU.js";import{c as p,s as v}from"./common-DE0SbnG8.js";const r=p(l.global,"types.BluetoothDeviceWrapper.");class m{isTerminated=!1;device;messages=f([]);constructor(e){this.device=e}async connectGattServer(){if(this.device.gatt?.connected)return!0;if(await this.device.gatt?.connect()!==void 0){this.addDisconnectHandler();for(const e of await this.listPrimaryServices())for(const t of await this.listCharacteristics(e.uuid))t.properties.notify&&await this.receiveNotification(e.uuid,t.uuid);return c.create({type:"positive",message:r("notifications.connectSuccess"),caption:r("labels.deviceId",{deviceId:this.device.id})}),!0}return c.create({type:"warning",message:r("notifications.connectFailed"),caption:r("labels.deviceId",{deviceId:this.device.id})}),!1}async disconnectGattServer(){this.isTerminated=!0,this.device.gatt?.connected&&(this.device.gatt?.disconnect(),c.create({type:"info",message:r("notifications.disconnected"),caption:r("labels.deviceId",{deviceId:this.device.id})}))}async listPrimaryServices(){return(await this.getGattServer())?.getPrimaryServices()??[]}async getPrimaryService(e){try{return await(await this.getGattServer())?.getPrimaryService(e)}catch{c.create({type:"warning",message:r("notifications.invalidServiceId",{serviceId:e}),caption:r("labels.deviceId",{deviceId:this.device.id})})}}async listCharacteristics(e){return(await this.getPrimaryService(e))?.getCharacteristics()??[]}async getCharacteristic(e,t){try{return await(await this.getPrimaryService(e))?.getCharacteristic(t)}catch{c.create({type:"warning",message:r("notifications.invalidCharacteristicId",{characteristicId:t}),caption:r("labels.deviceId",{deviceId:this.device.id})+`
`+r("labels.serviceId",{serviceId:e})})}}async receiveNotification(e,t){const i=await this.getCharacteristic(e,t);if(!i)return!1;let a=!1;for(;!a;){try{(await i.startNotifications()).addEventListener("characteristicvaluechanged",s=>{const o=s.target.value;if(o){const d=new TextDecoder().decode(o);console.log(d),this.messages.push({type:"receive",serviceId:e,characteristicId:t,payload:d})}}),a=!0}catch(s){console.log(s)}await v(10)}return!0}async write(e,t,i){const a=await this.getCharacteristic(e,t);if(!a)return!1;try{a.writeValue(new TextEncoder().encode(i)),this.messages.push({type:"send",serviceId:e,characteristicId:t,payload:i})}catch(s){return console.warn(s),c.create({type:"warning",message:r("notifications.sendFailed",{message:s.message}),caption:r("labels.deviceId",{deviceId:this.device.id})}),!1}return!0}addDisconnectHandler(){this.device.addEventListener("gattserverdisconnected",async()=>{for(;!this.isTerminated;){if(c.create({type:"warning",message:r("notifications.reconnecting"),caption:r("labels.deviceId",{deviceId:this.device.id})}),await this.connectGattServer())return;await v(3e3)}})}async getGattServer(){if(await this.connectGattServer())return this.device.gatt;c.create({type:"warning",message:r("notifications.noValidGattServer"),caption:r("labels.deviceId",{deviceId:this.device.id})})}}const g=p(l.global,"types.BluetoothManager.");class b{deviceMap=f(new Map);async connect(e){try{const t=await navigator.bluetooth.requestDevice(e);c.create({type:"info",message:g("notifications.connecting"),caption:g("labels.deviceId",{deviceId:t.id})});const i=new m(t);if(await i.connectGattServer())return this.deviceMap.set(t.id,i),t}catch(t){console.warn(t),c.create({type:"warning",message:g("notifications.canceled")})}}async disconnect(e){const t=this.deviceMap.get(e);t&&(await t.disconnectGattServer(),this.deviceMap.delete(e))}}const u="0123456789ABCDEF",D=n=>{let e="";return new Uint8Array("buffer"in n?n.buffer:n).forEach(t=>{e+=u[t>>4]+u[t&15]}),e},W=n=>new Uint8Array(n.match(/../g)?.map(e=>parseInt(e,16))??[]).buffer,S=(...n)=>{const e=n.reduce((i,a)=>i+a.length,0),t=new Uint8Array(e);return n.forEach((i,a,s)=>{const o=s.slice(0,a).reduce((d,w)=>d+w.length,0);t.set(i,o)}),t},h=p(l.global,"types.SerialPortWrapper.");class M{id;_port;_messageCallbacks=new Map;constructor(e,t){this.id=e,this._port=t,this.readLoop().then()}addMessageCallback(e,t){this._messageCallbacks.set(e,t)}async disconnect(){await this._port.close()}removeMessageCallback(e){this._messageCallbacks.delete(e)}write(e){if(console.log("write",e),this._port.writable){if(this._port.writable.locked)return;const t=this._port.writable.getWriter();t.write(e),t.releaseLock()}else c.create({type:"warning",message:h("notifications.writeError")})}async readLoop(){let e=new Uint8Array;for(;this._port.readable;){if(this._port.readable.locked){await v(50);continue}const t=this._port.readable.getReader();try{const{value:a,done:s}=await t.read();if(s){c.create({type:"positive",message:h("notifications.readDone")}),t.releaseLock();break}a&&(e=S(e,a))}catch(a){c.create({type:"warning",message:h("notifications.readError"),caption:a.message}),t.releaseLock();break}const i=new TextDecoder().decode(e);if(i.includes(`
`)){const a=i.split(`
`),s=new TextEncoder().encode(a.splice(-1,1)[0]);s.length>0&&(e=s);for(const o of a)this._messageCallbacks.forEach(d=>{d(o)})}}}}const _=p(l.global,"types.SerialManager.");class I{portMap=f(new Map);async connect(e){try{const t=await navigator.serial.requestPort({filters:[]});await t.open({baudRate:e});const i=t.getInfo(),a=[i.usbVendorId??65535,i.usbProductId??65535,y()].join("_"),s=new M(a,t);return this.portMap.set(a,s),s}catch(t){c.create({type:"warning",message:_("notifications.connectCanceled"),caption:t.message})}}async disconnect(e){const t=this.portMap.get(e);t&&(await t.disconnect(),this.portMap.delete(e))}}const C=new b,P=new I,x=Object.freeze(Object.defineProperty({__proto__:null,bluetoothManager:C,serialManager:P},Symbol.toStringTag,{value:"Module"}));export{D as a,C as b,W as h,x as m,P as s};
